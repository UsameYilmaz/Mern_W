1-) SERVER.JS
    //5000 portunda bizim serverımız dinleme yapsın. 
    //kendine gelen requestleri 5000 portunda yakalasın ve onlara burada cevap versin
    app.listen(5000)

    Bu server Çalışınca bir call back fonksiyonu oluşturalım;
    app.listen(5000 ,()=>{
        console.log("Server Çalıştı")
    })

2-)SERVER.JS
    //5000 portu yani anasayfaya ('/') geldiğinde Kullanıcıya Hoşgeldin Denilsin.
    //req requesti temsil eder. ress ise response u temsil ederi.
    app.get('/',(req,res)=>{
        res.send("Hoşgeldiiniz :)")
    })

    app.get('/html',(req,res)=>{
        res.send("Html sayasıda gönderilebilir bir template olusturulup o da gönderilebilirdi. :)")
    })

3-)Şema oluşturulması

    //const oluşturulacak_şema_ismi  = new mongoose.Schema
    //mongoose.Schemadan yeni bir şema olusturucaz.

    const bookSchema = new mongoose.Schema({
        //veritabanına atıcağım dökümanda bir bookName olsun ve bu bookName'in type 'ı string olsun. 
        //required olsun yani girilmesi zorunlu olsun. 
        //ve unique olsun yani aynı isimli birden fazla kitap girilemesin.
        //veritabanına atacağım ikinci ifadem author yani yazar olsun.
        bookName: {
            type: String,
            required: true,
            unique: true
        },
        author: {
            type: String,
            required: true,
            //bu unique olmamalı cunku bir yazarın birden fazla kitabı olabilir.
        },
        //sayısı önemlidir.
        quantity: {
            type: Number,//*
            required: true,
        },
        department: {
            type: String,
            required: true,
        },
        comments: {
            type: String,
        }
    },//şemanın altında birde timestamp olsun bu da bize, veritabanında verinin oluşturulma tarihini 
        //veya değiştirme tarihini vericektir.
        { timestamps: true })

4-) Şemanın export edilmesi;
    //şemayı import edilmesi gerekiyor ki başka yerde kullanabilelim.
    //   module.exports=mongoose.model("Veritabanın_ismi_ne_olmasını_istiyorsak","oluşturulacak_şema_ismi=yukarıda bookSchema demiştik")
    module.exports = mongoose.model("BookStore", bookSchema)
        //BookStore isimli bir model olusturduk ve bunu da export etmiş tolduk.

5-) Mongooes CONNECTİON
    //moongose.connect(databasemizin bulundugu url adresi yazılmalıdır.)
    mongoose.connect("mongodb+srv://TEST:123asdqwer@cluster0.g9uvonr.mongodb.net/books?retryWrites=true&w=majority", {
        useNewUrlParser: true,
        useUnifiedTopology: true
    })
    .then(console.log("connected to database"))
    .catch((err)=>console.log(err))
    //bağlantı gerçekleştikten sonra(then)



6-) DATABASEDEKİ İFADELERİ useState([]) e atılması.
  //gelecek olan kitaplar nesne olarak gelicek bunları array içerisinde tutucam.
  const [books, setBooks] = useState([]);

  //çekme işlemi için fetch kullanıcaz. Bunu da useEffect hook u ile kullanıcaz.
  useEffect(() => {
    // DATABASEDEN BÜTÜN DÖKÜMANLARI KİTAPLARI BOOKS İSİMLİ URL ADRESİNE DENK GELİCEK ŞEKİLDE ALMIŞTIK.
    // ////GET REQUEST İŞLEMİ
    // app.get("/books", (req, res) => {
    //   BookStore.find() //database atmıs oldugumuz dokumanları buldurmuş oluyoruz.
    //     .then((books) => res.json(books)); //iççerisindeki butun verileri jsona çevirip response olarak dönmesini sağladım.
    // });
    fetch("/books") // LOCALHOST 5000 ADRESİNDEKİ BOOKS URL SİNE GİRİP BURADAN BÜTÜNDATAYI FETCH ETTİM
      .then((res) => {//GELEN DATA BANA RES ŞEKLİNDE GELDİ
        if (res.ok) {//EĞERKİ GELEN CEVAP OKEY İSE YANİ GELEN BİR CEVAP VARSA
          return res.json();//BUNU JSONA ÇEVİR
        }
      })
      .then((jsonRes) => setBooks(jsonRes)); //
  });


  const backBook = (id) => {//axios kütüphanesinde update işlemleri için put kullanılmaktadır.
    axios.put('/back/'+id)//hangi url ye gitsn
    alert('The Book with id ${id} is back')
  }